/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "stash.us.cray.com/dpm/dws-operator/pkg/apis/dws/v1alpha1"
)

// DriverLister helps list Drivers.
type DriverLister interface {
	// List lists all Drivers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Driver, err error)
	// Drivers returns an object that can list and get Drivers.
	Drivers(namespace string) DriverNamespaceLister
	DriverListerExpansion
}

// driverLister implements the DriverLister interface.
type driverLister struct {
	indexer cache.Indexer
}

// NewDriverLister returns a new DriverLister.
func NewDriverLister(indexer cache.Indexer) DriverLister {
	return &driverLister{indexer: indexer}
}

// List lists all Drivers in the indexer.
func (s *driverLister) List(selector labels.Selector) (ret []*v1alpha1.Driver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Driver))
	})
	return ret, err
}

// Drivers returns an object that can list and get Drivers.
func (s *driverLister) Drivers(namespace string) DriverNamespaceLister {
	return driverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DriverNamespaceLister helps list and get Drivers.
type DriverNamespaceLister interface {
	// List lists all Drivers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Driver, err error)
	// Get retrieves the Driver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Driver, error)
	DriverNamespaceListerExpansion
}

// driverNamespaceLister implements the DriverNamespaceLister
// interface.
type driverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Drivers in the indexer for a given namespace.
func (s driverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Driver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Driver))
	})
	return ret, err
}

// Get retrieves the Driver from the indexer for a given namespace and name.
func (s driverNamespaceLister) Get(name string) (*v1alpha1.Driver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("driver"), name)
	}
	return obj.(*v1alpha1.Driver), nil
}
