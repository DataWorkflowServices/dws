/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "stash.us.cray.com/dpm/dws-operator/pkg/apis/dws/v1alpha1"
)

// DWDirectiveRuleLister helps list DWDirectiveRules.
type DWDirectiveRuleLister interface {
	// List lists all DWDirectiveRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DWDirectiveRule, err error)
	// DWDirectiveRules returns an object that can list and get DWDirectiveRules.
	DWDirectiveRules(namespace string) DWDirectiveRuleNamespaceLister
	DWDirectiveRuleListerExpansion
}

// dWDirectiveRuleLister implements the DWDirectiveRuleLister interface.
type dWDirectiveRuleLister struct {
	indexer cache.Indexer
}

// NewDWDirectiveRuleLister returns a new DWDirectiveRuleLister.
func NewDWDirectiveRuleLister(indexer cache.Indexer) DWDirectiveRuleLister {
	return &dWDirectiveRuleLister{indexer: indexer}
}

// List lists all DWDirectiveRules in the indexer.
func (s *dWDirectiveRuleLister) List(selector labels.Selector) (ret []*v1alpha1.DWDirectiveRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DWDirectiveRule))
	})
	return ret, err
}

// DWDirectiveRules returns an object that can list and get DWDirectiveRules.
func (s *dWDirectiveRuleLister) DWDirectiveRules(namespace string) DWDirectiveRuleNamespaceLister {
	return dWDirectiveRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DWDirectiveRuleNamespaceLister helps list and get DWDirectiveRules.
type DWDirectiveRuleNamespaceLister interface {
	// List lists all DWDirectiveRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DWDirectiveRule, err error)
	// Get retrieves the DWDirectiveRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DWDirectiveRule, error)
	DWDirectiveRuleNamespaceListerExpansion
}

// dWDirectiveRuleNamespaceLister implements the DWDirectiveRuleNamespaceLister
// interface.
type dWDirectiveRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DWDirectiveRules in the indexer for a given namespace.
func (s dWDirectiveRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DWDirectiveRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DWDirectiveRule))
	})
	return ret, err
}

// Get retrieves the DWDirectiveRule from the indexer for a given namespace and name.
func (s dWDirectiveRuleNamespaceLister) Get(name string) (*v1alpha1.DWDirectiveRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dwdirectiverule"), name)
	}
	return obj.(*v1alpha1.DWDirectiveRule), nil
}
